# generate synthetic 2d data consisting of linear events
# ======================================================
oz=0;dz=10;nz=200;
ox1=0;dx1=10.0;nx1=500;
ox2=0;dx2=10.0;nx2=1;
ox3=0;dx3=10.0;nx3=1;
ox4=0;dx4=10.0;nx4=1;
tau1=100;tau2=0.0;tau3=0.0;tau4=0.0;
v1=2;v2=2500;v3=2500;v4=2500;
amp=1;f0=0.01;
m = SeisLinearEvents(oz,dz,nz,ox1,dx1,nx1,ox2,dx2,nx2,ox3,dx3,nx3,ox4,dx4,nx4,tau1,tau2,tau3,tau4,v1,v2,v3,v4,amp,f0);

#f1 = PyPlot.figure(1)
#imshow(m[1:nz,:],cmap="PuOr",aspect="auto",vmin=-1,vmax=1)
#title("m")
#xlabel("X (m)")
#ylabel("Z (m)")

v = m*0 + 2000;
a = m*0;

nt = 500
dt = 0.004
wav = Seismic.Ricker(30,dt)
nwav = length(wav)
wav = cat(2,wav,zeros(1,nt-nwav))

h_w = Array(Header,1);
h_w[1] = Seismic.InitSeisHeader();
h_w[1].tracenum = 1;
h_w[1].n1 = nt;
h_w[1].d1 = dt;

h_m = Array(Header,nx1);
for ix = 1:nx1
  h_m[ix] = Seismic.InitSeisHeader();
  h_m[ix].tracenum = ix;
  h_m[ix].n1 = nz;
  h_m[ix].d1 = dz;
  h_m[ix].mx = (ix-1)*dx1;
end

SeisWrite("wav",wav',h_w);
SeisWrite("m",m,h_m);
SeisWrite("a",a,h_m);
SeisWrite("v",v,h_m);

param = ["wav"=> "wav", "ang"=> "a", "vel"=> "v", 
		 "adj"=> "n", "verbose"=> "y", "calc_ang"=> "y",
         "sx"=> 2500, "sz"=> 10, "gz"=> 10, 
         "fmin"=> 0, "fmax"=> 60, 
         "omp_num_threads"=> 8]
         
ShotWEM("m","d",param)
param["adj"] = "y"
ShotWEM("d","m_adj",param)

d,h = SeisRead("d");

using PyCall
@pyimport matplotlib.pyplot as plt
f2 = plt.figure(2)
plt.imshow(d,cmap="PuOr",aspect="auto",vmin=-10,vmax=10)
plt.title("d")
plt.xlabel("X (m)")
plt.ylabel("T (s)")
plt.show()

a,h = SeisRead("a");

f3 = plt.figure(3)
plt.imshow(a,cmap="PuOr",aspect="auto",vmin=-90,vmax=90)
plt.title("ang")
plt.xlabel("X (m)")
plt.ylabel("T (s)")
plt.show()
